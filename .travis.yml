branches:
    only:
        - master

language: python
python:
    - 2.6
    - 2.7
    - 3.4
    - 3.5

compiler:
    - g++

before_install:
    - export PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
    - sudo add-apt-repository ppa:fkrull/deadsnakes
    - sudo apt-get -qq update
    - sudo apt-get install -y python$TRAVIS_PYTHON_VERSION
    - sudo apt-get install -y python$TRAVIS_PYTHON_VERSION-dev
    - sudo apt-get install -y libboost-all-dev libfftw3-dev scons libblas-dev liblapack-dev gfortran

    # List current contents of directories that should be being cached.
    - ls -l $HOME
    - if test -d $HOME/tmv-0.73; then ls -l $HOME/tmv-0.73; fi
    - if test -d $HOME/des_data; then ls -l $HOME/des_data; fi

    # To get coverage of the WcsToolsWCS class:
    #- sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) universe"
    #- sudo apt-get -qq update
    #- sudo apt-get install -y wcstools
    # Hm. This didn't work, and I can't figure out why.  I get the following error:
    #     Reading package lists... Done
    #     Building dependency tree
    #     Reading state information... Done
    #     E: Unable to locate package wcstools
    # Perhaps someone with more familiarity with apt-get can figure this out, but for now, we'll
    # live with lack of coverage of WcsToolsWCS.

    # Only get TMV if not cached
    - pushd $HOME
    - if ! test -d tmv-0.73 || ! test -f tmv-0.73/SConstruct; then wget https://github.com/rmjarvis/tmv/archive/v0.73.tar.gz && tar -xf v0.73.tar.gz ; else echo Using cached TMV; fi
    # But always install it to /usr/local
    - cd tmv-0.73 && sudo scons install
    - popd

    # Add ~/bin and ~/lib to the appropriate paths where scons install will put things.
    - export PATH=$HOME/bin:$PATH
    - export LD_LIBRARY_PATH=$HOME/lib:$LD_LIBRARY_PATH
    - export PYTHONPATH=$HOME/lib/python$TRAVIS_PYTHON_VERSION/site-packages/:$PYTHONPATH

    # Get the des data needed for the check_des test.
    - if ! test -d $HOME/des_data || ! test -f $HOME/des_data/DECam_00154912_01.fits.fz; then wget http://www.sas.upenn.edu/~mjarvis/des_data.tar.gz && tar xfz des_data.tar.gz -C $HOME --wildcards *_01*; fi
    - ln -s $HOME/des_data examples/des/
    - pwd
    - which -a python
    - python --version

cache:
    pip: true
    directories:
    - $HOME/tmv-0.73
    - $HOME/des_data

install:
    - pwd
    - which -a python
    - which -a pip
    # Note: matplotlib is only required because starlink has an `import matplotlib` in their
    # code, despite that not being a dependency.
    # Allow 30 minutes for this one, since sometimes scipy in particular can take a long time
    # if it's not in the cache yet.
    - travis_wait 30 pip install numpy astropy==1.1.1 future pyyaml starlink-pyast nose codecov coveralls matplotlib==1.5.2 scipy==0.17.0
    #- set +e
    #- scons PREFIX=$HOME
    #- if test -f gs.error; then cat gs.error; fi

script:
    - pwd
    - which -a python
    - python --version
    # This lets scons work even on Python 3 builds
    # cf. https://github.com/travis-ci/travis-ci/issues/5961
    - source $HOME/virtualenv/python2.7/bin/activate
    - which -a python
    - export PYHOME=$HOME/virtualenv/python${TRAVIS_PYTHON_VERSION}
    - ls -l $PYHOME
    - ls -l $PYHOME/bin
    - ls -l $PYHOME/lib
    - ls -l $PYHOME/lib/python${TRAVIS_PYTHON_VERSION}
    - ls -l $PYHOME/lib/python${TRAVIS_PYTHON_VERSION}/site-packages
    - ls -l /usr/lib
    - ls -l /usr/local/lib
    - echo $PYTHONPATH
    - echo $LD_LIBRARY_PATH
    #- export PYTHONPATH=$HOME/lib/python$TRAVIS_PYTHON_VERSION/site-packages/:$PYTHONPATH
    #- echo $PYTHONPATH
    # But now we need to manually set the python, since it's not the default in this virtualenv.
    - scons PREFIX=$HOME PYTHON=$PYHOME/bin/python PYPREFIX=$PYHOME/lib/python${TRAVIS_PYTHON_VERSION}/site-packages EXTRA_LIBS=boost_python BOOST_DIR=$PYHOME && scons install
    - if test -f gs.error; then cat gs.error; fi
    # Go back to the regular python environment for the tests
    - source $PYHOME/bin/activate
    - cd tests
    # Use this rather than scons tests, so we can get the coverage options.
    - "nosetests test*.py --with-coverage --cover-package=galsim --with-doctest --cover-erase"
    # Without cover-erase, this will append to the .coverage file
    - "nosetests run_examples.py --with-coverage --cover-package=galsim --with-doctest"

after_success:
    # The multiprocessing stages don't get properly incorporated into the .coverage file unless
    # we do this command.  (Some of the .coverage.* files are in the ../examples directory.)
    - coverage combine . ../examples ../examples/great3 ../examples/des
    - coverage xml
    - ls -la

    # If we start doing multiple python versions here, then only send the report for one of them.
    # Otherwise the reported results get weird.
    - if [[ $TRAVIS_PYTHON_VERSION == 2.7 ]]; then coveralls; fi
    # Codecov is better at combining the results from different python versions.
    - codecov

before_cache:
    - rm -rf $HOME/.cache/pip/log
    - rm -rf $HOME/.cache/pip/http

after_failure:
    # Print out some things to help diagnose problems in the build.
    - ls -l $HOME
    - if test -d $HOME/tmv-0.73; then ls -l $HOME/tmv-0.73; fi
    - if test -d $HOME/des_data; then ls -l $HOME/des_data; fi
    - cd $TRAVIS_BUILD_DIR
    - pwd
    - ls -l
    - if test -f gs.error; then cat gs.error; fi
    - if test -f tests/tests.log; then cat tests.log; fi
